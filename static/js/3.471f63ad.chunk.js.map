{"version":3,"sources":["components/Order/checkoutSummary/CheckoutSummary.js","containers/checkout/ContactData/ContactData.js","containers/checkout/Checkout.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css","components/Order/checkoutSummary/CheckoutSummary.module.css","containers/checkout/ContactData/ContactData.module.css"],"names":["CheckoutSummary","props","className","style","width","margin","Burger","ingredients","Button","btnType","clicked","CheckoutCanceled","CheckoutContinued","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipcode","minLength","maxLength","country","email","deliveryMethod","options","displayedValue","formIsValid","orderHandler","event","preventDefault","formData","formElementIdentifire","order","ings","price","orderData","userId","onOrderBurger","token","inputChangedHandler","inputIdentifire","updatedOrderForm","updatedFormElement","target","checkValidity","setState","formElementArray","key","this","push","id","config","form","onSubmit","map","formElement","Input","invalid","shouldValidate","changed","disabled","loading","Component","connect","burgerBuilder","totalPrice","auth","dispatch","actions","withErrorHandler","axios","Checkout","history","goBack","replace","summary","to","purchaseRedirect","purchased","path","match","component","inputElement","inputClasses","InputElement","Invalid","join","onChange","option","Label","label","module","exports"],"mappings":"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","file":"static/js/3.471f63ad.chunk.js","sourcesContent":["import React from 'react';\r\nimport Burger from \"../../Burger/Burger\";\r\nimport Button from \"../../UI/Button/Button\";\r\nimport style from \"./CheckoutSummary.module.css\";\r\n\r\nconst CheckoutSummary = (props) => {\r\n    return (\r\n        <div className={style.CheckoutSummary}>\r\n            <h1>we hope it tastes well!</h1>\r\n            <div style={{width: \"100%\", margin: \"auto\"}}>\r\n                <Burger ingredients={props.ingredients}/>\r\n            </div>\r\n            <Button\r\n                btnType=\"Danger\"\r\n                clicked={props.CheckoutCanceled}\r\n            >CANCEL\r\n            </Button>\r\n            <Button\r\n                btnType=\"Success\"\r\n                clicked={props.CheckoutContinued}\r\n            >CONTINUE\r\n            </Button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CheckoutSummary;","import React, {Component} from 'react';\r\nimport Button from \"../../../components/UI/Button/Button\";\r\nimport Spinner from \"../../../components/UI/spinner/spinner\";\r\nimport style from \"./ContactData.module.css\";\r\nimport axios from \"../../../axios-orders\";\r\nimport Input from \"../../../components/UI/Input/Input\";\r\nimport {connect} from \"react-redux\";\r\nimport withErrorHandler from \"../../../hoc/withErrorHandler/withErrorHandler\";\r\nimport * as actions from \"../../../store/action/index\";\r\nimport {checkValidity} from \"../../../shared/utility\";\r\n\r\n\r\nclass ContactData extends Component {\r\n    state = {\r\n        orderForm: {\r\n\r\n            name: {\r\n                elementType: \"input\",\r\n                elementConfig: {\r\n                    type: \"text\",\r\n                    placeholder: \"Your Name\"\r\n                },\r\n                value: \"\",\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n\r\n            },\r\n            street: {\r\n                elementType: \"input\",\r\n                elementConfig: {\r\n                    type: \"text\",\r\n                    placeholder: \"Street\"\r\n                },\r\n                value: \"\",\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            zipcode: {\r\n                elementType: \"input\",\r\n                elementConfig: {\r\n                    type: \"text\",\r\n                    placeholder: \"ZIP Code\"\r\n                },\r\n                value: \"\",\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 5,\r\n                    maxLength: 5\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            country: {\r\n                elementType: \"input\",\r\n                elementConfig: {\r\n                    type: \"text\",\r\n                    placeholder: \"Country\"\r\n                },\r\n                value: \"\",\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            email: {\r\n                elementType: \"input\",\r\n                elementConfig: {\r\n                    type: \"email\",\r\n                    placeholder: \"Email\"\r\n                },\r\n                value: \"\",\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            deliveryMethod: {\r\n                elementType: \"select\",\r\n                elementConfig: {\r\n                    options: [\r\n                        {value: \"fastest\", displayedValue: \"Fastest\"},\r\n                        {value: \"cheapest\", displayedValue: \"Cheapest\"},\r\n\r\n                    ]\r\n\r\n                },\r\n                value: \"fastest\",\r\n                valid: true\r\n\r\n            },\r\n        },\r\n        formIsValid: false,\r\n\r\n    };\r\n\r\n\r\n    orderHandler = (event) => {\r\n        event.preventDefault();\r\n\r\n        const formData = {};\r\n        for (let formElementIdentifire in this.state.orderForm) {\r\n            formData[formElementIdentifire] = this.state.orderForm[formElementIdentifire].value;\r\n        }\r\n        const order = {\r\n            ingredients: this.props.ings,\r\n            price: this.props.price,\r\n            orderData: formData,\r\n            userId: this.props.userId\r\n        };\r\n\r\n        this.props.onOrderBurger(order, this.props.token);\r\n    };\r\n\r\n\r\n\r\n    inputChangedHandler = (event, inputIdentifire) => {\r\n        const updatedOrderForm = {\r\n            ...this.state.orderForm\r\n        };\r\n        const updatedFormElement = {...updatedOrderForm[inputIdentifire], value: event.target.value};\r\n        updatedFormElement.valid = checkValidity(updatedFormElement.value, updatedFormElement.validation);\r\n        updatedFormElement.touched = true;\r\n// updatedFormElement.value=event.target.value;\r\n        updatedOrderForm[inputIdentifire] = updatedFormElement;\r\n\r\n        let formIsValid = true;\r\n        for (let inputIdentifire in updatedOrderForm) {\r\n            formIsValid = updatedOrderForm[inputIdentifire].valid && formIsValid;\r\n        }\r\n        this.setState({\r\n            orderForm: updatedOrderForm,\r\n            formIsValid: formIsValid\r\n        })\r\n    };\r\n\r\n\r\n    render() {\r\n        const formElementArray = [];\r\n        for (let key in this.state.orderForm) {\r\n            formElementArray.push({\r\n                id: key,\r\n                config: this.state.orderForm[key]\r\n            })\r\n        }\r\n\r\n\r\n        let form = (<form onSubmit={this.orderHandler}>\r\n\r\n            {formElementArray.map(formElement => (\r\n                <Input\r\n                    key={formElement.id}\r\n                    elementType={formElement.config.elementType}\r\n                    elementConfig={formElement.config.elementConfig}\r\n                    value={formElement.config.value}\r\n                    invalid={!formElement.config.valid}\r\n                    shouldValidate={formElement.config.validation}\r\n                    touched={formElement.config.touched}\r\n                    changed={(event) => this.inputChangedHandler(event, formElement.id)}\r\n                />\r\n            ))}\r\n            <Button btnType=\"Success\" disabled={!this.state.formIsValid}>ORDER</Button>\r\n        </form>);\r\n        if (this.props.loading) {\r\n            form = <Spinner/>\r\n        }\r\n        return (\r\n            <div className={style.ContactData}>\r\n                <h4>Enter Your Contact Data</h4>\r\n                {form}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ings: state.burgerBuilder.ingredients,\r\n        price: state.burgerBuilder.totalPrice,\r\n        loading: state.order.loading,\r\n        token: state.auth.token,\r\n        userId: state.auth.userId\r\n    }\r\n};\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n\r\n        onOrderBurger: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token))\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));","import React, {Component} from \"react\";\r\nimport CheckoutSummary from \"../../components/Order/checkoutSummary/CheckoutSummary\";\r\nimport {Route, Redirect} from \"react-router-dom\";\r\nimport ContactData from \"./ContactData/ContactData\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\n\r\nclass Checkout extends Component {\r\n\r\n\r\n\r\n\r\n    CheckoutCanceled = () => {\r\n        this.props.history.goBack();\r\n    };\r\n    CheckoutContinued = () => {\r\n        this.props.history.replace(\"/checkout/contact-data\");\r\n\r\n    };\r\n\r\n    render() {\r\n        let summary = <Redirect to=\"/\"/>;\r\n\r\n        if (this.props.ings) {\r\n            const purchaseRedirect=this.props.purchased? <Redirect to=\"/\"/>:null;\r\n            summary =\r\n                <div>\r\n                    {purchaseRedirect}\r\n                <CheckoutSummary\r\n                ingredients={this.props.ings}\r\n                CheckoutCanceled={this.CheckoutCanceled}\r\n                CheckoutContinued={this.CheckoutContinued}\r\n            />\r\n                <Route\r\n            path={this.props.match.path + \"/contact-data\"}\r\n            component={ContactData}\r\n            />\r\n                </div>\r\n        }\r\n        return summary;\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ings: state.burgerBuilder.ingredients,\r\n        purchased: state.order.purchased,\r\n\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps)(Checkout);","import React from 'react';\r\nimport style from \"./Input.module.css\";\r\n\r\nconst Input = (props) => {\r\n    let inputElement = null;\r\n    const inputClasses=[style.InputElement];\r\n\r\nif(props.invalid && props.shouldValidate && props.touched){\r\n    inputClasses.push(style.Invalid);\r\n}\r\n\r\n    switch (props.elementType) {\r\n        case (\"input\"):\r\n            inputElement =\r\n                <input\r\n                    className={inputClasses.join(\" \")}\r\n                    {...props.elementConfig}\r\n                    value={props.value}\r\n                    onChange={props.changed}\r\n                />;\r\n            break;\r\n        case(\"textarea\"):\r\n            inputElement =\r\n                <textarea\r\n                    className={inputClasses.join(\" \")}\r\n                    {...props.elementConfig}\r\n                    value={props.value}\r\n                    onChange={props.changed}\r\n                />;\r\n            break;\r\n        case(\"select\"):\r\n            inputElement =\r\n                (<select\r\n                    className={inputClasses.join(\" \")}\r\n                    value={props.value}\r\n                    onChange={props.changed}\r\n                >\r\n                    {props.elementConfig.options.map(option => (\r\n                        <option\r\n                            key={option.value}\r\n                            value={option.value}\r\n                        >{option.displayedValue}</option>\r\n                    ))}\r\n\r\n                </select>);\r\n            break;\r\n        default:\r\n            inputElement =\r\n                <input\r\n                    className={inputClasses.join(\" \")}\r\n                    {...props.elementConfig}\r\n                    value={props.value}\r\n                    onChange={props.changed}\r\n                />\r\n    }\r\n    return (\r\n        <div className={style.Input}>\r\n            <label className={style.Label}>{props.label}</label>\r\n\r\n            {inputElement}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__ScWM3\",\"Label\":\"Input_Label__AiEJ4\",\"InputElement\":\"Input_InputElement__N63fm\",\"Invalid\":\"Input_Invalid__1xRBj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__2Xz5c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__2GBXu\"};"],"sourceRoot":""}