{"version":3,"sources":["containers/Auth/Auth.module.css","containers/Auth/Auth.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css"],"names":["module","exports","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignUP","inputChangedHandler","event","controlName","updatedControls","target","checkValidity","setState","submitHandler","preventDefault","props","onAuth","switchAuthModeHandler","prev","this","buildingBurger","authRedirectPath","onSetAuthRedirectPatch","formElementArray","key","push","id","config","form","map","formElement","invalid","shouldValidate","changed","loading","errorMessage","error","message","authRedirect","isAuthenticated","to","className","style","onSubmit","btnType","clicked","Component","connect","auth","token","burgerBuilder","building","dispatch","isSignUp","actions","Input","inputElement","inputClasses","InputElement","Invalid","join","onChange","options","option","displayedValue","Label","label"],"mappings":"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","file":"static/js/4.6ede9dd8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__29854\"};","import React, {Component} from \"react\";\r\nimport Input from \"../../components/UI/Input/Input\";\r\nimport Button from \"../../components/UI/Button/Button\";\r\nimport style from \"./Auth.module.css\";\r\nimport Spinner from \"../../components/UI/spinner/spinner\";\r\nimport * as actions from \"../../store/action/index\";\r\nimport {connect} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {checkValidity} from \"../../shared/utility\";\r\n\r\n\r\nclass Auth extends Component {\r\n\r\n    state = {\r\n        controls: {\r\n            email: {\r\n                elementType: \"input\",\r\n                elementConfig: {\r\n                    type: \"email\",\r\n                    placeholder: \"Mail Address\"\r\n                },\r\n                value: \"\",\r\n                validation: {\r\n                    required: true,\r\n                    isEmail: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n\r\n            },\r\n            password: {\r\n                elementType: \"input\",\r\n                elementConfig: {\r\n                    type: \"password\",\r\n                    placeholder: \"password\"\r\n                },\r\n                value: \"\",\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 6\r\n                },\r\n                valid: false,\r\n                touched: false\r\n\r\n            }\r\n        },\r\n        isSignUP: true,\r\n    };\r\n\r\n    componentDidMount() {\r\nif(!this.props.buildingBurger && this.props.authRedirectPath!==\"/\"){\r\nthis.props.onSetAuthRedirectPatch();\r\n}\r\n    }\r\n\r\n\r\n\r\n\r\n    inputChangedHandler = (event, controlName) => {\r\n        const updatedControls = {\r\n            ...this.state.controls,\r\n            [controlName]: {\r\n                ...this.state.controls[controlName],\r\n                value: event.target.value,\r\n                valid: checkValidity(event.target.value, this.state.controls[controlName].validation),\r\n                touched: true,\r\n            }\r\n        };\r\n        this.setState({controls: updatedControls})\r\n    };\r\n\r\n    submitHandler = (event) => {\r\n        event.preventDefault();\r\n        this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignUP);\r\n    };\r\n\r\n    switchAuthModeHandler = () => {\r\n        this.setState(prev => {\r\n                return {\r\n                    isSignUP: !prev.isSignUP\r\n                }\r\n            }\r\n        )\r\n\r\n    };\r\n\r\n\r\n    render() {\r\n        const formElementArray = [];\r\n        for (let key in this.state.controls) {\r\n            formElementArray.push({\r\n                id: key,\r\n                config: this.state.controls[key]\r\n            })\r\n        }\r\n\r\n        let form = formElementArray.map(formElement => (\r\n\r\n            <Input\r\n                key={formElement.id}\r\n                elementType={formElement.config.elementType}\r\n                elementConfig={formElement.config.elementConfig}\r\n                value={formElement.config.value}\r\n                invalid={!formElement.config.valid}\r\n                shouldValidate={formElement.config.validation}\r\n                touched={formElement.config.touched}\r\n                changed={(event) => this.inputChangedHandler(event, formElement.id)}\r\n            />\r\n\r\n\r\n        ));\r\n\r\n        if (this.props.loading) {\r\n            form = <Spinner/>;\r\n        }\r\n\r\n        let errorMessage = null;\r\n        if (this.props.error) {\r\n            errorMessage = (\r\n                <p>{this.props.error.message}</p>\r\n            )\r\n        }\r\n\r\n        let authRedirect = null;\r\n        if (this.props.isAuthenticated) {\r\n            authRedirect = <Redirect to={this.props.authRedirectPath}/>\r\n        }\r\n\r\n        return (\r\n            <div className={style.Auth}>\r\n                {authRedirect}\r\n                {errorMessage}\r\n\r\n                <form onSubmit={this.submitHandler}>\r\n                    {form}\r\n\r\n                    <Button btnType=\"Success\">SUBMIT</Button>\r\n                </form>\r\n                <Button\r\n                    clicked={this.switchAuthModeHandler}\r\n                    btnType=\"Danger\">\r\n                    SWITCH TO {this.state.isSignUP ? \"SIGN IN\" : \"SIGN UP\"}\r\n                </Button>\r\n            </div>\r\n        )\r\n\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loading: state.auth.loading,\r\n        error: state.auth.error,\r\n        isAuthenticated: state.auth.token !== null,\r\n        buildingBurger:state.burgerBuilder.building,\r\n        authRedirectPath: state.auth.authRedirectPath\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onAuth: (email, password, isSignUp) => dispatch(actions.auth(email, password, isSignUp)),\r\n        onSetAuthRedirectPatch:()=>dispatch(actions.setAuthRedirectPath(\"/\"))\r\n\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);","import React from 'react';\r\nimport style from \"./Input.module.css\";\r\n\r\nconst Input = (props) => {\r\n    let inputElement = null;\r\n    const inputClasses=[style.InputElement];\r\n\r\nif(props.invalid && props.shouldValidate && props.touched){\r\n    inputClasses.push(style.Invalid);\r\n}\r\n\r\n    switch (props.elementType) {\r\n        case (\"input\"):\r\n            inputElement =\r\n                <input\r\n                    className={inputClasses.join(\" \")}\r\n                    {...props.elementConfig}\r\n                    value={props.value}\r\n                    onChange={props.changed}\r\n                />;\r\n            break;\r\n        case(\"textarea\"):\r\n            inputElement =\r\n                <textarea\r\n                    className={inputClasses.join(\" \")}\r\n                    {...props.elementConfig}\r\n                    value={props.value}\r\n                    onChange={props.changed}\r\n                />;\r\n            break;\r\n        case(\"select\"):\r\n            inputElement =\r\n                (<select\r\n                    className={inputClasses.join(\" \")}\r\n                    value={props.value}\r\n                    onChange={props.changed}\r\n                >\r\n                    {props.elementConfig.options.map(option => (\r\n                        <option\r\n                            key={option.value}\r\n                            value={option.value}\r\n                        >{option.displayedValue}</option>\r\n                    ))}\r\n\r\n                </select>);\r\n            break;\r\n        default:\r\n            inputElement =\r\n                <input\r\n                    className={inputClasses.join(\" \")}\r\n                    {...props.elementConfig}\r\n                    value={props.value}\r\n                    onChange={props.changed}\r\n                />\r\n    }\r\n    return (\r\n        <div className={style.Input}>\r\n            <label className={style.Label}>{props.label}</label>\r\n\r\n            {inputElement}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__ScWM3\",\"Label\":\"Input_Label__AiEJ4\",\"InputElement\":\"Input_InputElement__N63fm\",\"Invalid\":\"Input_Invalid__1xRBj\"};"],"sourceRoot":""}